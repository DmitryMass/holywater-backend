{
  "name": "holywater-screen-config-backend",
  "version": "1.0.0",
  "description": "Backend API для управления конфигурациями экранов",
  "main": "dist/index.js",
  "scripts": {
    "start": "node dist/index.js",
    "dev": "ts-node-dev --respawn --transpile-only src/index.ts",
    "build": "tsc",
    "lint": "eslint . --ext .ts",
    "test": "jest",
    "check-env": "node -e \"const fs=require('fs'); const dotenv=require('dotenv'); if(fs.existsSync('.env')) { console.log('✅ .env файл найден'); const env=dotenv.config().parsed; console.log('NODE_ENV:', env.NODE_ENV ? '✅' : '❌'); console.log('PORT:', env.PORT ? '✅' : '❌'); console.log('MONGO_URI_DEV:', env.MONGO_URI_DEV ? '✅' : '❌'); console.log('MONGO_URI_PROD:', env.MONGO_URI_PROD ? '✅' : '❌'); } else { console.log('❌ .env файл не найден'); }\"",
    "setup:dev": "cp .env.example .env && echo '\\nНастройки окружения разработки скопированы в .env'",
    "start:dev": "npm run docker:down && npm run docker:dev",
    "start:dev:detached": "npm run docker:down && npm run docker:dev:detach",
    "start:prod": "NODE_ENV=production npm run docker:prod",
    "docker:dev": "docker-compose -f docker-compose.dev.yml up",
    "docker:dev:detach": "docker-compose -f docker-compose.dev.yml up -d",
    "docker:prod": "docker-compose -f docker-compose.yml up -d",
    "docker:build": "docker-compose -f docker-compose.dev.yml build",
    "docker:down": "docker-compose -f docker-compose.dev.yml down",
    "docker:clean": "docker-compose -f docker-compose.dev.yml down -v",
    "docker:logs": "docker-compose -f docker-compose.dev.yml logs -f api",
    "docker:logs:mongo": "docker-compose -f docker-compose.dev.yml logs -f mongodb",
    "docker:ps": "docker-compose -f docker-compose.dev.yml ps",
    "docker:shell": "docker exec -it screen-config-api-dev sh",
    "docker:mongo": "docker-compose -f docker-compose.dev.yml up -d mongodb mongo-express",
    "docker:mongo:client": "docker exec -it mongodb-dev mongosh -u root -p rootpassword --authenticationDatabase admin screen-config",
    "docker:stop:api": "docker-compose -f docker-compose.dev.yml stop api",
    "docker:start:api": "docker-compose -f docker-compose.dev.yml start api",
    "docker:export:data": "mkdir -p backup && docker exec -it mongodb-dev mongodump --host localhost --port 27017 -u root -p rootpassword --authenticationDatabase admin --db screen-config --out /data/db/backup && docker cp mongodb-dev:/data/db/backup ./backup",
    "docker:import:data": "docker cp ./backup mongodb-dev:/data/db/backup && docker exec -it mongodb-dev mongorestore --host localhost --port 27017 -u root -p rootpassword --authenticationDatabase admin --db screen-config /data/db/backup/screen-config"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "express-validator": "^7.0.1",
    "helmet": "^7.1.0",
    "mongoose": "^8.0.0",
    "morgan": "^1.10.0",
    "uuid": "^9.0.1",
    "winston": "^3.11.0"
  },
  "devDependencies": {
    "@types/cors": "^2.8.15",
    "@types/express": "^4.17.20",
    "@types/jest": "^29.5.7",
    "@types/morgan": "^1.9.7",
    "@types/node": "^20.8.10",
    "@types/uuid": "^9.0.5",
    "@typescript-eslint/eslint-plugin": "^6.9.1",
    "@typescript-eslint/parser": "^6.9.1",
    "eslint": "^8.52.0",
    "jest": "^29.7.0",
    "nodemon": "^3.0.1",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.1",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.2.2"
  }
}
